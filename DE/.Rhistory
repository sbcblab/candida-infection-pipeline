library(tximport)
library(tximportData)
library(readr)
repository = "candida-infection-pipeline"
# For RStudio only
current_dir = dirname(rstudioapi::getActiveDocumentContext()$path)
dir = strsplit(current_dir, repository)[[1]][1]
samples_data = read.table(file.path(dir, repository, "metadata/SraRunTable.txt"), header = TRUE, sep = ",")
tx2gene_file = read_csv(file.path(paste0(dir, repository, "/results/transcript_to_gene.csv")))
head(tx2gene_file)
isoform_files = file.path(dir, paste0("rsem_results/mm_", samples_data$Run, ".1_quals.isoforms.results"))
all(file.exists(isoform_files))
names(isoform_files) = paste0("sample", 1:19)
isoform_estimates = tximport(isoform_files, type = "rsem", tx2gene = tx2gene_file)
head(isoform_estimates$counts)
library(DESeq2)
dds_import = DESeqDataSetFromTximport(isoform_estimates, colData = samples_data, design = ~ Condition)
nrow(dds_import)
keep = rowSums(counts(dds_import)) >= 10
dds = dds_import[keep, ]
nrow(dds)
dds = DESeq(dds_import)
resultsNames(dds)
res_df = as.data.frame(res)
res = results(dds, contrast = c("Condition", "Disease", "Control"))
res = res[order(res$padj),]
mcols(res)$description
summary(res)
res_df = as.data.frame(res)
res_sig = subset(res, padj < 0.05 & abs(log2FoldChange) > 1)
summary(res_sig)
result_sig_df = as.data.frame(res_sig)
plotMA(res_sig, ylim = c(-10, 10))
#idx = identify(res_sig$baseMean, res_sig$log2FoldChange) #Select genes
#rownames(res_sig)[idx] #Selected genes
plotMA(res_sig, ylim = c(-10, 11))
#idx = identify(res_sig$baseMean, res_sig$log2FoldChange) #Select genes
#rownames(res_sig)[idx] #Selected genes
#idx = identify(res_sig$baseMean, res_sig$log2FoldChange) #Select genes
#rownames(res_sig)[idx] #Selected genes
plotMA(res_sig, ylim = c(-10, 10))
#idx = identify(res_sig$baseMean, res_sig$log2FoldChange) #Select genes
#rownames(res_sig)[idx] #Selected genes
---
title: "Differential Analysis"
output: default
---
```{r libraries}
library(tximport)
library(tximportData)
library(readr)
library(tximport)
library(tximportData)
library(readr)
```{r}
repository = "candida-infection-pipeline"
# For RStudio only
current_dir = dirname(rstudioapi::getActiveDocumentContext()$path)
dir = strsplit(current_dir, repository)[[1]][1]
samples_data = read.table(file.path(dir, repository, "metadata/SraRunTable.txt"), header = TRUE, sep = ",")
tx2gene_file = read_csv(file.path(paste0(dir, repository, "/results/transcript_to_gene.csv")))
tx2gene_file = read_csv(file.path(paste0(dir, repository, "/results/transcript_to_gene.csv")))
head(tx2gene_file)
Filtering genes
```{r}
keep = rowSums(counts(dds_import)) >= 10
dds = dds_import[keep, ]
## Results
```{r}
res = results(dds, contrast = c("Condition", "Disease", "Control"))
res = res[order(res$padj),]
mcols(res)$description
summary(res)
?head
isoform_files = file.path(dir, paste0("rsem_results/mm_", samples_data$Run, ".1_quals.isoforms.results"))
all(file.exists(isoform_files))
names(isoform_files) = paste0("sample", 1:19)
isoform_estimates = tximport(isoform_files, type = "rsem", tx2gene = tx2gene_file)
head(isoform_estimates$counts, n = 3)
vsd = vst(dds, blind = FALSE)
plotDispEsts( dds, ylim = c(1e-6, 1e1) )
plotDispEsts( dds, ylim = c(1e-6, 1e1) )
vsd = vst(dds, blind = FALSE)
plotDispEsts( dds, ylim = c(1e-6, 1e1) )
head(tx2gene_file, n = 3)
?results
library(DESeq2)
library("biomaRt")
library(readr)
repository = "candida-infection-pipeline"
# For RStudio only
current_dir = dirname(rstudioapi::getActiveDocumentContext()$path)
dir = strsplit(current_dir, repository)[[1]][1]
matrix = read.csv(file.path(dir, repository, "/results/expression_matrix.csv"), stringsAsFactors = FALSE)
matrix = read.csv(file.path(paste0(dir, repository, "/results/expression_matrix.csv")), stringsAsFactors = FALSE)
View(matrix)
matrix = read.csv(file.path(paste0(dir, repository, "/results/deseq_results.csv")), stringsAsFactors = FALSE)
library("biomaRt")
library(readr)
repository = "candida-infection-pipeline"
# For RStudio only
current_dir = dirname(rstudioapi::getActiveDocumentContext()$path)
dir = strsplit(current_dir, repository)[[1]][1]
matrix = read.csv(file.path(paste0(dir, repository, "/results/deseq_results.csv")), stringsAsFactors = FALSE)
View(matrix)
genes = matrix$X
listMarts()
mart = useMart("ensembl")
datasets = listDatasets(mart)
ensembl = useDataset("mmusculus_gene_ensembl", mart = mart)
attributes = listAttributes(ensembl)
annotation = getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "description", #"entrezgene_description",
"external_gene_name", "entrezgene_id", "gene_biotype"),
values = genes, mart = ensembl)
# Exportação de resultados
write.csv(as.data.frame(annotation), row.names = FALSE, file = paste0(workingDir, "/data/gene_annotation.csv"))
# Exportação de resultados
write.csv(as.data.frame(annotation), row.names = FALSE, file = paste0(dir, repository, "/results/gene_annotation.csv"))
annotation = getBM(filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "description", #"entrezgene_description",
"external_gene_name", "entrezgene_id", "gene_biotype"),
values = genes, mart = ensembl)
write.csv(as.data.frame(annotation), row.names = FALSE, file = paste0(dir, repository, "/results/gene_annotation.csv"))
